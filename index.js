require('dotenv').config();
const axios = require('axios');
const ethers = require('ethers');
const crypto = require('crypto');
const fs = require('fs');
const { HttpsProxyAgent } = require('https-proxy-agent');
const { SocksProxyAgent } = require('socks-proxy-agent');
const userAgents = require('user-agents');
const readline = require('readline');
const chalk = require('chalk'); // –ï—Å–ª–∏ —É –≤–∞—Å chalk v5, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ require('chalk').default

// –ò–∑–º–µ–Ω—è–µ–º—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ (–º–æ–∂–Ω–æ –º–µ–Ω—è—Ç—å —á–µ—Ä–µ–∑ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ –º–µ–Ω—é)
let DELAY_BETWEEN_WALLETS = 2000; // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ–ø–µ—Ä–∞—Ü–∏—è–º–∏ —Å –∫–æ—à–µ–ª—å–∫–∞–º–∏ (–º—Å)
let MAX_RETRIES = 3;              // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –ø–æ–ø—ã—Ç–æ–∫ –ª–æ–≥–∏–Ω–∞
let CHECK_INTERVAL = 60 * 1000;   // –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ (–º—Å)

// –§–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –ø–æ–ª—É—á–µ–Ω–∏—è –±–æ–Ω—É—Å–æ–≤
const CLAIMS_FILE = './claims.json';
let claims = {};
if (fs.existsSync(CLAIMS_FILE)) {
  try {
    claims = JSON.parse(fs.readFileSync(CLAIMS_FILE, 'utf8'));
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ claims.json:', error.message);
  }
}
function saveClaims() {
  try {
    fs.writeFileSync(CLAIMS_FILE, JSON.stringify(claims, null, 2));
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞ claims.json:', error.message);
  }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö –∫–ª—é—á–µ–π –∏–∑ .env
let privateKeys = [];
if (process.env.PRIVATE_KEY) {
  if (process.env.PRIVATE_KEY.includes(',')) {
    privateKeys = process.env.PRIVATE_KEY.split(',').map(key => key.trim());
  } else {
    privateKeys.push(process.env.PRIVATE_KEY);
  }
}
let keyIndex = 1;
while (process.env[`PRIVATE_KEY_${keyIndex}`]) {
  privateKeys.push(process.env[`PRIVATE_KEY_${keyIndex}`]);
  keyIndex++;
}
if (privateKeys.length === 0) {
  console.error('\x1b[31m%s\x1b[0m', '‚ùå –û—à–∏–±–∫–∞: –ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞ –≤ .env');
  process.exit(1);
}
console.log(`\nüìã –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${privateKeys.length} –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö –∫–ª—é—á–µ–π –∏–∑ .env`);

// –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–∫—Å–∏ –∏–∑ proxies.txt (–µ—Å–ª–∏ –µ—Å—Ç—å)
let proxies = [];
try {
  if (fs.existsSync('./proxies.txt')) {
    const proxiesContent = fs.readFileSync('./proxies.txt', 'utf8');
    proxies = proxiesContent
      .split('\n')
      .map(proxy => proxy.trim())
      .filter(proxy => proxy && !proxy.startsWith('#'));
    console.log(`üåê –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${proxies.length} –ø—Ä–æ–∫—Å–∏ –∏–∑ proxies.txt`);
  }
} catch (error) {
  console.error('\x1b[33m%s\x1b[0m', `‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ proxies.txt: ${error.message}`);
}

// –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–∫—Å–∏-–∞–≥–µ–Ω—Ç–∞
function createProxyAgent(proxyString) {
  if (!proxyString) return null;
  try {
    if (proxyString.startsWith('socks://') || proxyString.startsWith('socks4://') || proxyString.startsWith('socks5://')) {
      return new SocksProxyAgent(proxyString);
    }
    let formattedProxy = proxyString;
    if (!formattedProxy.includes('://')) {
      if (formattedProxy.includes('@') || !formattedProxy.match(/^\d+\.\d+\.\d+\.\d+:\d+$/)) {
        formattedProxy = `http://${formattedProxy}`;
      } else {
        const [host, port] = formattedProxy.split(':');
        formattedProxy = `http://${host}:${port}`;
      }
    }
    return new HttpsProxyAgent(formattedProxy);
  } catch (error) {
    console.error('\x1b[33m%s\x1b[0m', `‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ–∫—Å–∏-–∞–≥–µ–Ω—Ç–∞ –¥–ª—è ${proxyString}: ${error.message}`);
    return null;
  }
}

// –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ user-agent
function getRandomUserAgent() {
  const ua = new userAgents({ deviceCategory: 'desktop' });
  return ua.toString();
}

// ASCII‚Äë–±–∞–Ω–Ω–µ—Ä
function printBanner() {
  process.stdout.write('\x1B[2J\x1B[0f'); // –û—á–∏—Å—Ç–∫–∞ —ç–∫—Ä–∞–Ω–∞
  console.log(chalk.yellow(`
        _   _           _  _____      
       | \\ | |         | ||____ |     
       |  \\| | ___   __| |    / /_ __ 
       | . \` |/ _ \\ / _\` |    \\ \\ '__|
       | |\\  | (_) | (_| |.___/ / |   
       \\_| \\_/\\___/ \\__,_|\\____/|_|   

      SyntheliX Manager Bot ‚Äî —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∫–∏  
      TG: @Nod3r
  `));
}

// –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –Ω–æ–¥—ã –¥–ª—è –∫–æ—à–µ–ª—å–∫–∞
async function startSynthelixNodeForWallet(privateKey, proxyString, walletLabel, retryCount = 0) {
  const wallet = new ethers.Wallet(privateKey);
  const address = wallet.address;
  const proxyAgent = proxyString ? createProxyAgent(proxyString) : null;
  const userAgent = getRandomUserAgent();

  // –í—ã–≤–æ–¥–∏–º –≤ –ª–æ–≥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–∏–≤—è–∑–∞–Ω–Ω–æ–º –ø—Ä–æ–∫—Å–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å)
  console.log('\x1b[36m%s\x1b[0m', `\nüîÑ –ó–∞–ø—É—Å–∫ –Ω–æ–¥—ã –¥–ª—è ${walletLabel}: ${address.substring(0, 6)}...${address.substring(address.length - 4)}${proxyString ? ` (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–æ–∫—Å–∏: ${proxyString})` : ' (–±–µ–∑ –ø—Ä–æ–∫—Å–∏)'}`);

  // –î–æ–±–∞–≤–ª—è–µ–º —Ç–∞–π–º–∞—É—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä, 30 —Å–µ–∫—É–Ω–¥) –∫ axiosConfig
  const axiosConfig = {
    httpsAgent: proxyAgent,
    httpAgent: proxyAgent,
    timeout: 30000
  };

  try {
    let cookies = '';
    let csrfToken = '';
    const commonHeaders = {
      'accept': '*/*',
      'content-type': 'application/json',
      'user-agent': userAgent,
      'sec-ch-ua-mobile': '?0',
      'sec-ch-ua-platform': '"Windows"',
      'Referer': 'https://dashboard.synthelix.io/'
    };

    process.stdout.write('\x1b[90m–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏... \x1b[0m');
    const providersResponse = await axios.get('https://dashboard.synthelix.io/api/auth/providers', {
      ...axiosConfig,
      headers: commonHeaders
    });
    console.log('\x1b[32m%s\x1b[0m', '‚úì');
    if (providersResponse.headers['set-cookie']) {
      cookies = providersResponse.headers['set-cookie'].join('; ');
    }

    process.stdout.write('\x1b[90m–ü–æ–ª—É—á–µ–Ω–∏–µ CSRF —Ç–æ–∫–µ–Ω–∞... \x1b[0m');
    const csrfResponse = await axios.get('https://dashboard.synthelix.io/api/auth/csrf', {
      ...axiosConfig,
      headers: { ...commonHeaders, 'Cookie': cookies }
    });
    console.log('\x1b[32m%s\x1b[0m', '‚úì');
    csrfToken = csrfResponse.data.csrfToken;
    if (csrfResponse.headers['set-cookie']) {
      cookies = [...(cookies ? [cookies] : []), ...csrfResponse.headers['set-cookie']].join('; ');
    }

    process.stdout.write('\x1b[90m–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø–æ–¥–ø–∏—Å–∏ —Å–æ–æ–±—â–µ–Ω–∏—è... \x1b[0m');
    const nonce = generateRandomString(32);
    const requestId = Date.now().toString();
    const issuedAt = new Date().toISOString();
    const domain = { name: "Synthelix", version: "1", chainId: 1, verifyingContract: "0x0000000000000000000000000000000000000000" };
    const types = { Authentication: [{ name: "address", type: "address" }, { name: "statement", type: "string" }, { name: "nonce", type: "string" }, { name: "requestId", type: "string" }, { name: "issuedAt", type: "string" }] };
    const value = { address, statement: "–ü–æ–¥–ø–∏—à–∏—Ç–µ –¥–ª—è –≤—Ö–æ–¥–∞ –≤ Synthelix Dashboard.", nonce, requestId, issuedAt };

    let signature;
    try {
      if (typeof wallet.signTypedData === 'function') {
        signature = await wallet.signTypedData(domain, types, value);
      } else if (typeof wallet._signTypedData === 'function') {
        signature = await wallet._signTypedData(domain, types, value);
      } else {
        const messageString = JSON.stringify({ domain, types, value });
        signature = await wallet.signMessage(ethers.utils.arrayify(ethers.utils.keccak256(ethers.utils.toUtf8Bytes(messageString))));
      }
    } catch (err) {
      const messageToSign = `${address}:${value.statement}:${value.nonce}:${value.requestId}:${value.issuedAt}`;
      signature = await wallet.signMessage(messageToSign);
    }
    console.log('\x1b[32m%s\x1b[0m', '‚úì');

    process.stdout.write('\x1b[90m–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —á–µ—Ä–µ–∑ web3... \x1b[0m');
    const authData = new URLSearchParams({
      address, signature, domain: JSON.stringify(domain), types: JSON.stringify(types), value: JSON.stringify(value),
      redirect: 'false', callbackUrl: '/', csrfToken, json: 'true'
    });
    const authResponse = await axios.post('https://dashboard.synthelix.io/api/auth/callback/web3', authData.toString(), {
      ...axiosConfig,
      headers: { ...commonHeaders, 'content-type': 'application/x-www-form-urlencoded', 'Cookie': cookies }
    });
    console.log('\x1b[32m%s\x1b[0m', '‚úì');
    if (authResponse.headers['set-cookie']) {
      cookies = [...(cookies ? [cookies] : []), ...authResponse.headers['set-cookie']].join('; ');
    }

    process.stdout.write('\x1b[90m–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏... \x1b[0m');
    const sessionResponse = await axios.get('https://dashboard.synthelix.io/api/auth/session', {
      ...axiosConfig,
      headers: { ...commonHeaders, 'Cookie': cookies }
    });
    console.log('\x1b[32m%s\x1b[0m', '‚úì');
    if (sessionResponse.headers['set-cookie']) {
      cookies = [...(cookies ? [cookies] : []), ...sessionResponse.headers['set-cookie']].join('; ');
    }

    const pointsInfo = await getPointsInfo(cookies, commonHeaders, axiosConfig);
    console.log('\x1b[36m%s\x1b[0m', `üíé –ë–∞–ª–ª—ã –¥–æ —Å—Ç–∞—Ä—Ç–∞: ${pointsInfo.totalPoints || 0}`);

    const statusInfo = await getNodeStatus(cookies, commonHeaders, axiosConfig);
    if (statusInfo.nodeRunning) {
      process.stdout.write('\x1b[90m–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–∞–Ω–µ–µ –∑–∞–ø—É—â–µ–Ω–Ω–æ–π –Ω–æ–¥—ã... \x1b[0m');
      try {
        const timeRunningHours = statusInfo.currentEarnedPoints / statusInfo.pointsPerHour;
        await axios.post('https://dashboard.synthelix.io/api/node/stop', {
          claimedHours: timeRunningHours,
          pointsEarned: statusInfo.currentEarnedPoints
        }, { ...axiosConfig, headers: { ...commonHeaders, 'Cookie': cookies } });
        console.log('\x1b[32m%s\x1b[0m', '‚úì');
        console.log('\x1b[32m%s\x1b[0m', `üí∞ –ü–æ–ª—É—á–µ–Ω–æ ${statusInfo.currentEarnedPoints} –±–∞–ª–ª–æ–≤`);
        await delay(1000);
      } catch (error) {
        console.log('\x1b[31m%s\x1b[0m', '‚ùå');
        console.error('\x1b[33m%s\x1b[0m', `‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –Ω–æ–¥—ã: ${error.message}`);
      }
    }

    process.stdout.write('\x1b[90m–ó–∞–ø—É—Å–∫ –Ω–æ–¥—ã... \x1b[0m');
    await axios.post('https://dashboard.synthelix.io/api/node/start', null, {
      ...axiosConfig,
      headers: { ...commonHeaders, 'Cookie': cookies }
    });
    console.log('\x1b[32m%s\x1b[0m', '‚úì');
    console.log('\x1b[32m%s\x1b[0m', `‚úÖ –ù–æ–¥–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–∞ –¥–ª—è ${walletLabel}: ${address.substring(0, 6)}...${address.substring(address.length - 4)}!\n`);

    await claimDailyRewards(address, cookies, commonHeaders, axiosConfig, walletLabel);
    const updatedStatusInfo = await getNodeStatus(cookies, commonHeaders, axiosConfig);
    const updatedPointsInfo = await getPointsInfo(cookies, commonHeaders, axiosConfig);

    console.log('\x1b[33m%s\x1b[0m', `\nüìä –°—Ç–∞—Ç—É—Å –Ω–æ–¥—ã –¥–ª—è ${walletLabel}: ${address.substring(0, 6)}...${address.substring(address.length - 4)}:`);
    console.log('\x1b[33m%s\x1b[0m', `üîÑ –°–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–æ–¥—ã: ${updatedStatusInfo.nodeRunning ? '–ó–∞–ø—É—â–µ–Ω–∞' : '–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞'}`);
    console.log('\x1b[33m%s\x1b[0m', `‚è±Ô∏è –û—Å—Ç–∞–ª–æ—Å—å: ${formatTime(updatedStatusInfo.timeLeft)}`);
    console.log('\x1b[33m%s\x1b[0m', `üí∞ –¢–µ–∫—É—â–∏–µ –±–∞–ª–ª—ã: ${updatedStatusInfo.currentEarnedPoints || 0}`);
    console.log('\x1b[33m%s\x1b[0m', `üí∏ –ë–∞–ª–ª–æ–≤/—á–∞—Å: ${updatedStatusInfo.pointsPerHour || 0}`);
    console.log('\x1b[33m%s\x1b[0m', `üíé –í—Å–µ–≥–æ –±–∞–ª–ª–æ–≤: ${updatedPointsInfo.totalPoints || 0}`);
    console.log('\x1b[33m%s\x1b[0m', `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ`);

    return {
      success: true, address, cookies, commonHeaders, axiosConfig,
      timeLeft: updatedStatusInfo.timeLeft, statusInfo: updatedStatusInfo,
      pointsInfo: updatedPointsInfo, walletLabel
    };
  } catch (error) {
    console.log('\x1b[31m%s\x1b[0m', '‚ùå');
    console.error('\x1b[31m%s\x1b[0m', `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –Ω–æ–¥—ã –¥–ª—è ${walletLabel}: ${address.substring(0, 6)}...${address.substring(address.length - 4)}: ${error.message}`);
    if (retryCount < MAX_RETRIES) {
      console.log('\x1b[33m%s\x1b[0m', `‚ö†Ô∏è –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—É—Å–∫ ${walletLabel}: ${address.substring(0, 6)}...${address.substring(address.length - 4)} (–ü–æ–ø—ã—Ç–∫–∞ ${retryCount + 1}/${MAX_RETRIES})...`);
      await delay(5000);
      return startSynthelixNodeForWallet(privateKey, proxyString, walletLabel, retryCount + 1);
    }
    return { success: false, address, error: error.message, walletLabel };
  }
}

// –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –±–æ–Ω—É—Å–æ–≤ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –≤—Ä–µ–º–µ–Ω–∏
async function claimDailyRewards(address, commonHeaders, axiosConfig, walletLabel, cookies) {
  const lastClaimTime = claims[address];
  const now = Date.now();
  const ONE_DAY = 24 * 3600 * 1000;
  
  if (lastClaimTime && (now - lastClaimTime) < ONE_DAY) {
    console.log('\x1b[33m%s\x1b[0m', 
      `‚ÑπÔ∏è –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –±–æ–Ω—É—Å—ã —É–∂–µ –ø–æ–ª—É—á–µ–Ω—ã –¥–ª—è ${walletLabel}: ${address.substring(0, 6)}...${address.substring(address.length - 4)}. ` +
      `–°–ª–µ–¥—É—é—â–∏–π –±–æ–Ω—É—Å —á–µ—Ä–µ–∑ ${formatTime(Math.floor((ONE_DAY - (now - lastClaimTime)) / 1000))}.`);
    return false;
  }
  
  try {
    process.stdout.write('\x1b[90m–ü–æ–ª—É—á–µ–Ω–∏–µ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –±–æ–Ω—É—Å–æ–≤... \x1b[0m');
    const updatedHeaders = { ...commonHeaders, 'Cookie': cookies, 'Referer': 'https://dashboard.synthelix.io/' };
    await axios.post('https://dashboard.synthelix.io/api/rew/dailypoints', { points: 1000 }, {
      ...axiosConfig,
      headers: updatedHeaders
    });
    console.log('\x1b[32m%s\x1b[0m', '‚úì');
    console.log('\x1b[32m%s\x1b[0m', `üí∞ –ü–æ–ª—É—á–µ–Ω–æ 1000 –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –±–∞–ª–ª–æ–≤ –¥–ª—è ${walletLabel}: ${address.substring(0, 6)}...${address.substring(address.length - 4)}`);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–æ–Ω—É—Å–∞ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º
    claims[address] = now;
    saveClaims();
    return true;
  } catch (error) {
    console.log('\x1b[31m%s\x1b[0m', '‚ùå');
    console.error('\x1b[33m%s\x1b[0m', `‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –±–æ–Ω—É—Å—ã: ${error.message}`);
    if (error.response && error.response.data && error.response.data.error === 'Already claimed today') {
      console.log('\x1b[33m%s\x1b[0m', 
        `‚ÑπÔ∏è –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –±–æ–Ω—É—Å—ã —É–∂–µ –ø–æ–ª—É—á–µ–Ω—ã –¥–ª—è ${walletLabel}: ${address.substring(0, 6)}...${address.substring(address.length - 4)}`);
      claims[address] = now;
      saveClaims();
    }
    return false;
  }
}

// –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –Ω–æ–¥—ã
async function getNodeStatus(cookies, commonHeaders, axiosConfig) {
  try {
    process.stdout.write('\x1b[90m–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –Ω–æ–¥—ã... \x1b[0m');
    const updatedHeaders = { ...commonHeaders, 'Cookie': cookies, 'Referer': 'https://dashboard.synthelix.io/' };
    const response = await axios.get('https://dashboard.synthelix.io/api/node/status', {
      ...axiosConfig,
      headers: updatedHeaders
    });
    console.log('\x1b[32m%s\x1b[0m', '‚úì');
    return response.data;
  } catch (error) {
    console.log('\x1b[31m%s\x1b[0m', '‚ùå');
    console.error('\x1b[33m%s\x1b[0m', `‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –Ω–æ–¥—ã: ${error.message}`);
    return { nodeRunning: false, timeLeft: 0, currentEarnedPoints: 0, pointsPerHour: 0 };
  }
}

// –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–∞–ª–ª–∞—Ö
async function getPointsInfo(cookies, commonHeaders, axiosConfig) {
  try {
    process.stdout.write('\x1b[90m–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–∞–ª–ª–∞—Ö... \x1b[0m');
    const updatedHeaders = {
      ...commonHeaders,
      'accept': '*/*',
      'accept-language': 'ru-RU,ru;q=0.9',
      'sec-ch-ua': '"Brave";v="135", "Not-A.Brand";v="8", "Chromium";v="135"',
      'sec-ch-ua-mobile': '?0',
      'sec-ch-ua-platform': '"Windows"',
      'sec-gpc': '1',
      'Cookie': cookies,
      'Referer': 'https://dashboard.synthelix.io/'
    };
    const response = await axios.get('https://dashboard.synthelix.io/api/get/points', {
      ...axiosConfig,
      headers: updatedHeaders
    });
    console.log('\x1b[32m%s\x1b[0m', '‚úì');
    return { totalPoints: response.data.points || 0 };
  } catch (error) {
    console.log('\x1b[31m%s\x1b[0m', '‚ùå');
    console.error('\x1b[33m%s\x1b[0m', `‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∞–ª–ª–∞—Ö: ${error.message}`);
    return { totalPoints: 0 };
  }
}

// –§—É–Ω–∫—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏
function formatTime(seconds) {
  if (!seconds) return '0c';
  const hours = Math.floor(seconds / 3600);
  const minutes = Math.floor((seconds % 3600) / 60);
  const remainingSeconds = Math.floor(seconds % 60);
  let result = '';
  if (hours > 0) result += `${hours}—á `;
  if (minutes > 0 || hours > 0) result += `${minutes}–º `;
  result += `${remainingSeconds}—Å`;
  return result.trim();
}

// –§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–ª—É—á–∞–π–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
function generateRandomString(length) {
  return crypto.randomBytes(Math.ceil(length / 2))
    .toString('hex')
    .slice(0, length)
    .replace(/[^a-zA-Z0-9]/g, '')
    .replace(/(.{1,4})/g, (m) => Math.random() > 0.5 ? m.toUpperCase() : m);
}

// –§—É–Ω–∫—Ü–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏
function delay(ms) {
  return new Promise(resolve => setTimeout(resolve, ms));
}

/* 
  –§—É–Ω–∫—Ü–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –Ω–æ–¥ (–æ–¥–∏–Ω —Ü–∏–∫–ª).
  –ï—Å–ª–∏ inLoop === true, –Ω–µ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç—Å—è "–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é..."
*/
async function monitorNodesOnce(inLoop = false) {
  console.clear();
  printBanner();
  console.log(`üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ ${privateKeys.length} –∫–æ—à–µ–ª—å–∫–æ–≤ ‚Äî ${new Date().toLocaleString()}\n`);

  let activeWallets = 0;
  const walletSessions = {};

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Å—Å–∏–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–æ—à–µ–ª—å–∫–∞
  for (let i = 0; i < privateKeys.length; i++) {
    const privateKey = privateKeys[i];
    const walletLabel = `–ö–æ—à–µ–ª—ë–∫ ${i + 1}`;
    const proxy = proxies.length > 0 ? proxies[i % proxies.length] : null;
    const result = await startSynthelixNodeForWallet(privateKey, proxy, walletLabel);
    if (result.success) {
      walletSessions[result.address] = result;
      activeWallets++;
    }
    if (i < privateKeys.length - 1) await delay(DELAY_BETWEEN_WALLETS);
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–æ–¥
  for (let i = 0; i < privateKeys.length; i++) {
    const privateKey = privateKeys[i];
    const wallet = new ethers.Wallet(privateKey);
    const address = wallet.address;
    const walletLabel = `–ö–æ—à–µ–ª—ë–∫ ${i + 1}`;
    const shortAddress = `${address.substring(0, 6)}...${address.substring(address.length - 4)}`;
    const proxy = proxies.length > 0 ? proxies[i % proxies.length] : null;

    try {
      if (walletSessions[address] && walletSessions[address].cookies) {
        const session = walletSessions[address];
        const statusInfo = await getNodeStatus(session.cookies, session.commonHeaders, session.axiosConfig);
        const pointsInfo = await getPointsInfo(session.cookies, session.commonHeaders, session.axiosConfig);

        console.log('\x1b[36m%s\x1b[0m', `${walletLabel}: ${shortAddress}`);
        console.log('\x1b[33m%s\x1b[0m', `–°–æ—Å—Ç–æ—è–Ω–∏–µ: ${statusInfo.nodeRunning ? '–ó–∞–ø—É—â–µ–Ω–∞' : '–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞'}`);
        console.log('\x1b[33m%s\x1b[0m', `–û—Å—Ç–∞–ª–æ—Å—å: ${formatTime(statusInfo.timeLeft)}`);
        console.log('\x1b[33m%s\x1b[0m', `–¢–µ–∫—É—â–∏–µ –±–∞–ª–ª—ã: ${statusInfo.currentEarnedPoints || 0}`);
        console.log('\x1b[33m%s\x1b[0m', `–ë–∞–ª–ª–æ–≤/—á–∞—Å: ${statusInfo.pointsPerHour || 0}`);
        console.log('\x1b[33m%s\x1b[0m', `–í—Å–µ–≥–æ –±–∞–ª–ª–æ–≤: ${pointsInfo.totalPoints || 0}`);
        console.log('');

        if (!statusInfo.nodeRunning || statusInfo.timeLeft < 600) {
          console.log('\x1b[33m%s\x1b[0m', `‚ö†Ô∏è –ù–æ–¥–∞ —Ç—Ä–µ–±—É–µ—Ç –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –¥–ª—è ${walletLabel}: ${shortAddress}`);
          if (statusInfo.nodeRunning && statusInfo.currentEarnedPoints > 0) {
            process.stdout.write('\x1b[90m–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–æ–¥—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–ª–æ–≤... \x1b[0m');
            try {
              const timeRunningHours = statusInfo.currentEarnedPoints / statusInfo.pointsPerHour;
              await axios.post('https://dashboard.synthelix.io/api/node/stop', {
                claimedHours: timeRunningHours,
                pointsEarned: statusInfo.currentEarnedPoints
              }, { ...session.axiosConfig, headers: { ...session.commonHeaders, 'Cookie': session.cookies } });
              console.log('\x1b[32m%s\x1b[0m', '‚úì');
              console.log('\x1b[32m%s\x1b[0m', `üí∞ –ü–æ–ª—É—á–µ–Ω–æ ${statusInfo.currentEarnedPoints} –±–∞–ª–ª–æ–≤`);
              await delay(1000);
            } catch (error) {
              console.log('\x1b[31m%s\x1b[0m', '‚ùå');
              console.error('\x1b[33m%s\x1b[0m', `‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –Ω–æ–¥—ã: ${error.message}`);
            }
          }
          process.stdout.write('\x1b[90m–ó–∞–ø—É—Å–∫ –Ω–æ–¥—ã... \x1b[0m');
          await axios.post('https://dashboard.synthelix.io/api/node/start', null, {
            ...session.axiosConfig,
            headers: { ...session.commonHeaders, 'Cookie': session.cookies }
          });
          console.log('\x1b[32m%s\x1b[0m', '‚úì');
          await claimDailyRewards(address, session.cookies, session.commonHeaders, session.axiosConfig, walletLabel);
          const updatedStatus = await getNodeStatus(session.cookies, session.commonHeaders, session.axiosConfig);
          const updatedPoints = await getPointsInfo(session.cookies, session.commonHeaders, session.axiosConfig);
          walletSessions[address].timeLeft = updatedStatus.timeLeft;
          walletSessions[address].statusInfo = updatedStatus;
          walletSessions[address].pointsInfo = updatedPoints;
        }
      } else {
        console.log('\x1b[33m%s\x1b[0m', `‚ö†Ô∏è –°–µ—Å—Å–∏—è –¥–ª—è ${walletLabel}: ${shortAddress} –∏—Å—Ç–µ–∫–ª–∞, –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –≤—Ö–æ–¥...`);
        const result = await startSynthelixNodeForWallet(privateKey, proxy, walletLabel);
        if (result.success) {
          walletSessions[address] = result;
        }
      }
    } catch (error) {
      console.error('\x1b[31m%s\x1b[0m', `‚ùå –û—à–∏–±–∫–∞ ${walletLabel}: ${shortAddress}: ${error.message}`);
    }
    if (i < privateKeys.length - 1) await delay(DELAY_BETWEEN_WALLETS);
  }

  console.log('\x1b[36m%s\x1b[0m', `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ`);
  console.log('\x1b[36m%s\x1b[0m', `–ò—Ç–æ–≥–æ:`);
  console.log(`–í—Å–µ–≥–æ –∫–æ—à–µ–ª—å–∫–æ–≤: ${privateKeys.length}`);
  console.log(`–ê–∫—Ç–∏–≤–Ω—ã—Ö –Ω–æ–¥: ${activeWallets}`);
  const nextCheckTime = new Date(Date.now() + CHECK_INTERVAL);
  console.log(`–°–ª–µ–¥—É—é—â–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: ${nextCheckTime.toLocaleString()}`);
  console.log('\x1b[36m%s\x1b[0m', `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ`);

  if (!inLoop) {
    await askQuestion('–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é...');
  }
}

/* 
  –§—É–Ω–∫—Ü–∏—è –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –Ω–æ–¥.
  –í—ã–∑—ã–≤–∞–µ—Ç monitorNodesOnce(true) –≤ –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–º —Ü–∏–∫–ª–µ.
*/
async function monitorNodesInfinite() {
  while (true) {
    await monitorNodesOnce(true);
    await delay(CHECK_INTERVAL);
  }
}

/* ---------------------- –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ –º–µ–Ω—é ---------------------- */
const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});
function askQuestion(query) {
  return new Promise(resolve => rl.question(query, ans => resolve(ans.trim())));
}
async function addPrivateKey() {
  const newKey = await askQuestion('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á: ');
  if (newKey) {
    privateKeys.push(newKey);
    console.log('‚úÖ –ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!');
  } else {
    console.log('‚ö†Ô∏è –ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á –Ω–µ –±—ã–ª –≤–≤–µ–¥—ë–Ω.');
  }
}
async function addProxy() {
  const newProxy = await askQuestion('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø—Ä–æ–∫—Å–∏ (–≤ —Ñ–æ—Ä–º–∞—Ç–µ host:port –∏–ª–∏ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º —Å—Ö–µ–º—ã): ');
  if (newProxy) {
    proxies.push(newProxy);
    console.log('‚úÖ –ü—Ä–æ–∫—Å–∏ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!');
  } else {
    console.log('‚ö†Ô∏è –ü—Ä–æ–∫—Å–∏ –Ω–µ –±—ã–ª –≤–≤–µ–¥—ë–Ω.');
  }
}
function showInfo() {
  console.log('\nüìã –¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:');
  console.log(`–ü—Ä–∏–≤–∞—Ç–Ω—ã—Ö –∫–ª—é—á–µ–π: ${privateKeys.length}`);
  console.log(`–ü—Ä–æ–∫—Å–∏: ${proxies.length}`);
  if (privateKeys.length > 0) {
    console.log('–°–ø–∏—Å–æ–∫ –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö –∫–ª—é—á–µ–π (–ø–µ—Ä–≤—ã–µ 6 –∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 4 —Å–∏–º–≤–æ–ª–∞):');
    privateKeys.forEach((key, idx) => {
      console.log(`  [${idx + 1}] ${key.substring(0, 6)}...${key.substring(key.length - 4)}`);
    });
  }
  if (proxies.length > 0) {
    console.log('–°–ø–∏—Å–æ–∫ –ø—Ä–æ–∫—Å–∏:');
    proxies.forEach((p, idx) => console.log(`  [${idx + 1}] ${p}`));
  }
  console.log('');
}

async function editConstants() {
  console.log('\nüìã –¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–¥–µ—Ä–∂–µ–∫:');
  console.log(`1. DELAY_BETWEEN_WALLETS: ${DELAY_BETWEEN_WALLETS} –º—Å`);
  console.log(`2. MAX_RETRIES: ${MAX_RETRIES}`);
  console.log(`3. CHECK_INTERVAL: ${CHECK_INTERVAL} –º—Å`);
  console.log("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–ª–∏ –æ—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ.");
  
  let input = await askQuestion("–ù–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è DELAY_BETWEEN_WALLETS (–∏–ª–∏ 'r' –¥–ª—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ, –¥–∏–∞–ø–∞–∑–æ–Ω 1000-5000): ");
  if (input.trim().toLowerCase() === 'r') {
    DELAY_BETWEEN_WALLETS = Math.floor(Math.random() * (5000 - 1000 + 1)) + 1000;
    console.log("–°–ª—É—á–∞–π–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: " + DELAY_BETWEEN_WALLETS);
  } else if (input.trim()) {
    let newVal = parseInt(input);
    if (!isNaN(newVal)) DELAY_BETWEEN_WALLETS = newVal;
  }
  
  input = await askQuestion("–ù–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è MAX_RETRIES (–∏–ª–∏ 'r' –¥–ª—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ, –¥–∏–∞–ø–∞–∑–æ–Ω 1-5): ");
  if (input.trim().toLowerCase() === 'r') {
    MAX_RETRIES = Math.floor(Math.random() * (5 - 1 + 1)) + 1;
    console.log("–°–ª—É—á–∞–π–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: " + MAX_RETRIES);
  } else if (input.trim()) {
    let newVal = parseInt(input);
    if (!isNaN(newVal)) MAX_RETRIES = newVal;
  }
  
  input = await askQuestion("–ù–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è CHECK_INTERVAL (–º—Å) (–∏–ª–∏ 'r' –¥–ª—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ, –¥–∏–∞–ø–∞–∑–æ–Ω 30000-120000): ");
  if (input.trim().toLowerCase() === 'r') {
    CHECK_INTERVAL = Math.floor(Math.random() * (120000 - 30000 + 1)) + 30000;
    console.log("–°–ª—É—á–∞–π–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: " + CHECK_INTERVAL);
  } else if (input.trim()) {
    let newVal = parseInt(input);
    if (!isNaN(newVal)) CHECK_INTERVAL = newVal;
  }
  
  console.log("\n–ù–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:");
  console.log(`DELAY_BETWEEN_WALLETS: ${DELAY_BETWEEN_WALLETS} –º—Å`);
  console.log(`MAX_RETRIES: ${MAX_RETRIES}`);
  console.log(`CHECK_INTERVAL: ${CHECK_INTERVAL} –º—Å`);
  await askQuestion('–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é...');
}

async function mainMenu() {
  while (true) {
    printBanner();
    console.log('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:');
    console.log('1. –ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–≤—Ç–æ–ø–æ–¥–¥–µ—Ä–∂–∫—É –Ω–æ–¥ (–æ–¥–∏–Ω —Ü–∏–∫–ª –ø—Ä–æ–≤–µ—Ä–∫–∏)');
    console.log('2. –ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–≤—Ç–æ–ø–æ–¥–¥–µ—Ä–∂–∫—É –Ω–æ–¥ (–±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª)');
    console.log('3. –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á');
    console.log('4. –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –ø—Ä–æ–∫—Å–∏-—Å–µ—Ä–≤–µ—Ä');
    console.log('5. –í—ã–≤–µ—Å—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö');
    console.log('6. –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–¥–µ—Ä–∂–µ–∫');
    console.log('7. –í—ã—Ö–æ–¥');
    const answer = await askQuestion('\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –¥–µ–π—Å—Ç–≤–∏—è: ');
    switch (answer) {
      case '1':
        console.log('üîÑ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–ø–æ–¥–¥–µ—Ä–∂–∫–∏ –Ω–æ–¥. –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –æ–¥–∏–Ω —Ü–∏–∫–ª –ø—Ä–æ–≤–µ—Ä–∫–∏...\n');
        await monitorNodesOnce();
        break;
      case '2':
        console.log('üîÑ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–ø–æ–¥–¥–µ—Ä–∂–∫–∏ –Ω–æ–¥ (–±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª). –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C.\n');
        await monitorNodesInfinite();
        break;
      case '3':
        await addPrivateKey();
        await askQuestion('–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é...');
        break;
      case '4':
        await addProxy();
        await askQuestion('–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é...');
        break;
      case '5':
        showInfo();
        await askQuestion('–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é...');
        break;
      case '6':
        await editConstants();
        break;
      case '7':
        console.log('–í—ã—Ö–æ–¥ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã. –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!');
        rl.close();
        process.exit(0);
      default:
        console.log('‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
        await askQuestion('–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é...');
    }
  }
}

mainMenu();